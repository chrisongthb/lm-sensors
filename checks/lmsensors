#!/usr/bin/python

# Example for output from agent
# ---------------------------------------------------------
# iwlwifi-virtual-0
# temp1 +29.0°C
# pch_skylake-virtual-0
# temp1 +39.5°C
# acpitz-virtual-0
# temp1 +41.0°C  crit  +98.0°C
# thinkpad-isa-0000
# fan1 0 RPM
# coretemp-isa-0000
# Package_id_0 +41.0°C  high  +100.0°C crit  +100.0°C
# Core_0 +41.0°C  high  +100.0°C crit  +100.0°C
# Core_1 +41.0°C  high  +100.0°C crit  +100.0°C
# Core_2 +41.0°C  high  +100.0°C crit  +100.0°C
# Core_3 +41.0°C  high  +100.0°C crit  +100.0°C
# ---------------------------------------------------------

def inventory_lmsensors_temp(info):
	return parse_lmsensors('lmsensors.temp', info)

def inventory_lmsensors_fan(info):
	return parse_lmsensors('lmsensors.fan', info)

def inventory_lmsensors_volt(info):
	return parse_lmsensors('lmsensors.volt', info)

def to_chip_sensor_name(chipname, sensorname):
	return chipname + ' ' + sensorname

def parse_lmsensors(checkname, info):
	# [['lm85i2c02e'], ['in0', '+1.56', 'V', 'min', '+0.00', 'V', 'max', '+3.32', 'V'], ['Vcore', '+1.35', 'V', 'min', '+0.00', 'V', 'max', '+2.99', 'V'], ['+3.3V', '+3.33', 'V', 'min', '+0.00', 'V', 'max', '+4.38', 'V'], ['+5V', '+5.10', 'V', 'min', '+0.00', 'V', 'max', '+6.64', 'V'], ['+12V', '+12.00', 'V', 'min', '+0.00', 'V', 'max', '+15.94', 'V'], ['fan1', '1376', 'RPM', 'min', '0', 'RPM'], ['fan2', '0', 'RPM', 'min', '0', 'RPM'], ['fan3', '970', 'RPM', 'min', '0', 'RPM'], ['fan4', '1276', 'RPM', 'min', '0', 'RPM'], ['temp1', '+59.0', 'C', 'low', '128.0', 'C', 'high', '+127.0', 'C'], ['MB', 'Temp', '+50.0', 'C', 'low', '127.0', 'C', 'high', '+127.0', 'C'], ['temp3', '+43.0', 'C', 'low', '127.0', 'C', 'high', '+127.0', 'C'], ['cpu0vid', '+1.088', 'V']]
	inventory = []
	chipname = ''
	for line in info:
		if len(line) < 3 and len(line) == 1:
			chipname = line[0] # 'lm85i2c02e'
			continue

		sname = line[0] # 'in0', 'fan1', etc
		# scur  = line[1] # current value, '+1.56'
		stype = line[2] # 'V', 'RPM', 'C'

		smin = None
		smax = None
		# See if sensor has a supplied min/max value
		if len(line) > 5:
			if line[3] == 'min' or line[3] == 'low':
				smin = line[4]
			elif line[3] == 'max' or line[3] == 'high':
				smax = line[4]
		if len(line) > 8:
			if line[6] == 'min' or line[6] == 'low':
				smin = line[7]
			elif line[6] == 'max' or line[6] == 'high':
				smax = line[7]

		chip_sensors_name = to_chip_sensor_name(chipname, sname)

		if stype == 'V' and checkname == 'lmsensors.volt':
			inventory.append( (chip_sensors_name, "", (smin, smax)) )
		elif stype == 'C' and checkname == 'lmsensors.temp':
			inventory.append( (chip_sensors_name, "", (smin, smax)) )
		elif stype == 'RPM' and checkname == 'lmsensors.fan':
			inventory.append( (chip_sensors_name, "", (smin, smax)) )
	return inventory

def check_lmsensors(item, params, info):
	smin, smax = params
	values = None
	chipname = ''

	for line in info:
		if len(line) == 1:
			chipname = line[0]
		elif len(line) > 1 and to_chip_sensor_name(chipname, line[0]) == item:
			values = line
			break
	if values == None:
		return (3, "UNKNOWN - sensor status not found in agent output")
	value = float(values[1])
	stype = values[2]
	perfdata = [ ( item, value, "", savefloat(smax) ) ]
	if smax != None and value > float(smax):
		return (2, "CRITICAL - Sensor value %s %s, which is bigger than %s" % (value, stype, smax), perfdata)
	elif smin != None and value < float(smin):
		return (2, "CRITICAL - Sensor value %s %s, which is smaller than %s" % (value, stype, smin), perfdata)
	# TODO: warnings
	else:
		return (0, "OK - Sensor value is %s %s" % (value, stype), perfdata)

check_info['lmsensors.fan'] = (check_lmsensors, "Sensor %s", 1, inventory_lmsensors_fan)
check_info['lmsensors.temp'] = (check_lmsensors, "Sensor %s", 1, inventory_lmsensors_temp)
check_info['lmsensors.volt'] = (check_lmsensors, "Sensor %s", 1, inventory_lmsensors_volt)

